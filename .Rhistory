scale_fill_manual(values=c(rgb(51,160,44, max = 255), rgb(251,154,153, max = 255), rgb(227,26,28, max = 255), rgb(255,255,153, max = 255), rgb(130,130,130, max = 255), rgb(255,127,0, max = 255),                       rgb(168,112,0, max = 255))) +
theme_clean()
ggplot() +
geom_polygon(data = biome_mapdata, aes(x = long, y = lat, group = group), fill = "grey", color = NA, size = 0.25) +
geom_polygon(data = biome_EU27_mapdata, aes(x = long, y = lat, group = group, fill = id)) +
scale_fill_manual(values=c(rgb(51,160,44, max = 255), rgb(251,154,153, max = 255), rgb(227,26,28, max = 255), rgb(255,255,153, max = 255), rgb(130,130,130, max = 255), rgb(255,127,0, max = 255),                       rgb(168,112,0, max = 255))) +
scale_fill_discrete(name="BIOME",limits=c("4", "5", "6", "8", "11","12", "98"), labels=c("Temperate Broadleaf and Mixed Forests", "Temperate Coniferous Forests", "Boreal Forests/Taiga", "Temperate Grasslands, Savannas, and Shrublands", "Tundra", "Mediterranean Forests, Woodlands, and Scrub", "Lakes and Ice")) +
theme_clean()
ggplot() +
geom_polygon(data = biome_mapdata, aes(x = long, y = lat, group = group), fill = "grey", color = NA, size = 0.25) +
geom_polygon(data = biome_EU27_mapdata, aes(x = long, y = lat, group = group, fill = id)) +
scale_fill_manual(values=c(rgb(51,160,44, max = 255), rgb(251,154,153, max = 255), rgb(227,26,28, max = 255), rgb(255,255,153, max = 255), rgb(130,130,130, max = 255), rgb(255,127,0, max = 255),                       rgb(168,112,0, max = 255)), name="BIOME",limits=c("4", "5", "6", "8", "11","12", "98"), labels=c("Temperate Broadleaf and Mixed Forests", "Temperate Coniferous Forests", "Boreal Forests/Taiga", "Temperate Grasslands, Savannas, and Shrublands", "Tundra", "Mediterranean Forests, Woodlands, and Scrub", "Lakes and Ice")) +
#  scale_fill_discrete() +
theme_clean()
p <- ggplot() +
geom_polygon(data = biome_mapdata, aes(x = long, y = lat, group = group), fill = "grey", color = NA, size = 0.25) +
geom_polygon(data = biome_EU27_mapdata, aes(x = long, y = lat, group = group, fill = id)) +
scale_fill_manual(values=c(rgb(51,160,44, max = 255), rgb(251,154,153, max = 255), rgb(227,26,28, max = 255), rgb(255,255,153, max = 255), rgb(130,130,130, max = 255), rgb(255,127,0, max = 255),                       rgb(168,112,0, max = 255)), name="BIOME",limits=c("4", "5", "6", "8", "11","12", "98"), labels=c("Temperate Broadleaf and Mixed Forests", "Temperate Coniferous Forests", "Boreal Forests/Taiga", "Temperate Grasslands, Savannas, and Shrublands", "Tundra", "Mediterranean Forests, Woodlands, and Scrub", "Lakes and Ice")) +
theme_clean()
ggsave(p, file = "CountrysideSAR_Methods/CountrysideSAR_DataPreparation/Figures/Biome_EU27_map.png", width = 5, height = 4.5, type = "cairo-png")
ggsave(p, file = "CountrysideSAR_Methods/CountrysideSAR_DataPreparation/Figures/Biome_EU27_map.png", width = 10, height = 5, type = "cairo-png")
setwd("Y:/Home/hoppek/CountrysideSAR_Methods")
setwd("~/CountrysideSAR_Methods")
setwd("C:/Users/hoppek/Documents")
ogrListLayers('CountrysideSAR_Methods/FloraEuropeanAtlas/MGRS_100kmSQ_ID_File_Geodatabase/MGRS_100kmSQ_ID.gdb')
setwd("c:/Users/hoppek/Documents/")
ogrListLayers('CountrysideSAR_Methods/FloraEuropeanAtlas/MGRS_100kmSQ_ID_File_Geodatabase/MGRS_100kmSQ_ID.gdb')
ogrListLayers('CountrysideSAR_Methods/FloraEuropeanAtlas/MGRS_100kmSQ_ID_File_Geodatabase/MGRS_100kmSQ_ID.gdb')
myFeatureClass1 <- readOGR("CountrysideSAR_Methods/FloraEuropeanAtlas/MGRS_100kmSQ_ID_File_Geodatabase/MGRS_100kmSQ_ID.gdb",layer="MGRS_100kmSQ_ID_34T")
# Replace with the path to your Zotero sqlite file
dbZot <- "~/.mozilla/firefox/rhhh8jil.Default User/zotero/zotero.sqlite"
# Put a character of the top level folders you want to extract
# This will include subfolders as well
vTopFolders <- c("rawWOSimport")
##########################
#libraries
require(sqldf)
require(gdata)
require(reshape2)
require(reshape)
require(plyr)
install.packages("RSQLite.extfuns")
library("sqldf", lib.loc="~/R/win-library/3.0")
install.packages("manipulate")
library(sqldf)
install.packages("devtools")
devtools::install_github("ggrothendieck/sqldf")
install.packages("sqldf")
install.packages("gdata")
install.packages("reshape")
install.packages("reshape2")
install.packages("plyr")
# Replace with the path to your Zotero sqlite file
dbZot <- "~/.mozilla/firefox/rhhh8jil.Default User/zotero/zotero.sqlite"
# Put a character of the top level folders you want to extract
# This will include subfolders as well
vTopFolders <- c("rawWOSimport")
##########################
#libraries
require(sqldf)
require(gdata)
require(reshape2)
require(reshape)
require(plyr)
sqlC <- "SELECT
items.itemID,
collections.collectionID,
collections.collectionName,
collections.parentCollectionID,
fields.fieldName,
itemDataValues.value,
creatorData.firstName,
creatorData.lastName,
itemNotes.title,
itemNotes.note
FROM
collectionItems
INNER JOIN items ON (collectionItems.itemID = items.itemID)
INNER JOIN collections ON (collectionItems.collectionID = collections.collectionID)
INNER JOIN itemCreators ON (items.itemID = itemCreators.itemID)
INNER JOIN itemData ON (itemData.itemID = items.itemID)
INNER JOIN itemDataValues ON (itemData.valueID = itemDataValues.valueID)
LEFT OUTER JOIN itemNotes ON (items.itemID = itemNotes.sourceItemID)
INNER JOIN creators ON (itemCreators.creatorID = creators.creatorID)
INNER JOIN creatorData ON (creators.creatorDataID = creatorData.creatorDataID)
INNER JOIN fields ON (itemData.fieldID = fields.fieldID)"
# This sends query to sqlite db
# Notice bug, stringAsFactor=F results in 0 vars, but T with method="raw" gets desired outcome
##MB: this is really stupid! I had to look for the very first entry (using head on the imported dfData) and change it within Zotreo so that the first values (page issue etc) is a chr and no int - otherwise R will remove all titles ....
dfData <- sqldf(sqlC,, stringsAsFactors = F, dbname=dbZot, method="raw")
#This filter the data from sqlite and extracts the ID of the top level folder
#vParentID <- unique(dfData[dfData$collectionName %in% vTopFolders,"collectionID"])
#This extracts a mapping of parent-child IDs
#dfParentChildID <-  unique(dfData[vParentID %in% dfData$parentCollectionID,c("itemID","collectionID","parentCollectionID","collectionName")])
dbZot <- "C:/Users/hoppek/AppData/Roaming/Mozilla/Firefox/Profiles/1tla1nl6.default/zotero/zotero.sqlite" # KG
dfData <- sqldf(sqlC,, stringsAsFactors = F, dbname=dbZot, method="raw")
dfData <- sqldf(sqlC,, stringsAsFactors = F, dbname=dbZot, method="raw")
# Creates another unique ID for the original dataset from sqlite
dfData$ID <- with(dfData,paste(itemID,sep="-"))
# merge the datasset
#dfData2 <- merge(dfData,dfParentChildID2,by=c("ID"),all=TRUE)
# Get rid of the NA row in data and extract some key variables
dfData3 <- dfData[c("ID","collectionName","fieldName", "value", "firstName", "lastName", "title")]
#rename vars to prevent name conflict later on
dfData3 <- rename.vars(dfData3, from="title",to="notetitle")
dfData4 <- cast(data = dfData3, ID + collectionName + firstName + lastName + notetitle ~ fieldName, value = "value", fun.aggregate=max)
# Make author last name only
dfData4$author <- with(dfData4, lastName)
# Alternative: both names dfData4$author <- with(dfData4, paste(lastName,firstName,sep=","))
dfData6 <- unique(dfData4[,c("ID", "author", "publicationTitle","title","bookTitle", "date")])
dfNames <- ddply(dfData6, .(ID), summarise, authors = paste(author,sep=";",collapse=";"))
# Merge new names back into dataset
dfData5 <- merge(dfData4,dfNames)
# Make the prior data frame unique and extract the vars of interest
dfData6 <- unique(dfData5[,c("ID", "author", "authors", "publicationTitle","title","bookTitle", "date", "notetitle")])
# Extract the year from the data
dfData6$date <- substr(as.character(dfData6$date),1,4)
#order by top folder
#dfData6 <- dfData6[order(dfData6$top.sub.folder),]
#convert all factor to character
dfData6 <- as.data.frame(lapply(dfData6,as.character),stringsAsFactors=F)
#Combine book-article so that I know what book an article or chapter came from.
dfData6$bookjournal <- with(dfData6, ifelse(is.na(bookTitle), title,paste(bookTitle,title,sep="::")))
# Drop unnecessary Var
#dfData7 <- dfData6[,-7]
gs_ls() # once authorized, this will list the files you have in GS
library(devtools)
devtools::install_github("jennybc/googlesheets") # documentation at:http://htmlpreview.github.io/?https://raw.githubusercontent.com/jennybc/googlesheets/master/vignettes/basic-usage.html and https://github.com/jennybc/googlesheets
library(googlesheets)
gs_ls() #follow the displayed url, go to browser and enter your login credentials click accept and copy key back into R
gs_auth(new_user = TRUE) # you get an unauthorized error
LUBDES_gsheet<- gs_title("LUBDES coding table v2") # load LUBDES  coding table, this crashes sometimes but seems to work as of April 22 2015
data <- gs_read(LUBDES_gsheet, ws = "1. Coding Table version 2") # consume data from sheet 1
data<-as.data.frame(data)
str(data) # check variable types
data$X..of.samples.for.BD.measure <- as.integer(data$X..of.samples.for.BD.measure)
#dissmiss studies with missing mean for BD or yield
data <- data[-(which(is.na(data$richness.mean))),]
data <- data[-(which(is.na(data$yield.mean))),]
################################
### create study-case identifier
data$study.case <- factor(paste(data$Study.ID,data$Case.ID,sep="_"))
#######################################################################
### apply imputation methods, impute BD and yield sd and then calculate se
library(mi)
### specify data frame for imputation
# Adding "latitude..N..S.", "longitude..E..W.", "Land.cover", "PES.category" cause error
# TO Do: standardize sampled.size.unit for BD and yield, so that sampled.area has the same unit overall, then sampled.size.unit becomes obsolete
#data2impute <- data[,c("study.type", "Country", "Land.use...land.cover", "Intensity.broad", "Fertilization", "Irrigation", "Pesticides", "Grazing", "Mowing", "Clear.Cut.y.n.", "Selective.Logging.y.n.", "Partial.Logging.y.n.", "species.group", "trophic.level..species.guild", "richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "sampled.area", "sampled.size.unit", "product", "yield.unit", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure", "sampled.size.area", "sampled.size.unit.1")]
data2impute <- data[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")]
### convert the data.frame to a missing_data.frame, which is an enhanced version of a data.frame that includes metadata about the variables that is essential in a missing data context
mi.df <- missing_data.frame(data2impute)
### check whether the missing_data.frame constructor function initially guessed the appropriate class for each missing_variable, if not use change()
show(mi.df)
mi.df <- change_type(mi.df, c("X..of.samples.for.BD.measure","X..of.samples.for.YD.measure"), to="count")
# mi.df <- change_link(mi.df, c("richness.SD","yield.SD"), to="log") # to ensure SD is estimated as positive number, however this does not work and cause errror when calling the mi-function: Error in checkForRemoteErrors(val) : 2 nodes produced errors; first error: cannot find valid starting values: please specify some
### get a sense of the raw data and their missingness patterns
image(mi.df)
### use the mi function to do the actual imputation, specify how many independent chains to utilize, how many iterations to conduct, and the maximum amount of time the user is willing to wait for all the iterations of all the chains to finish
imputations <- mi(mi.df, n.iter = 20, n.chains = 4, max.minutes = 20)
### check convergence by calculating the mean over imputation chains
(data.imp <- round(mipply(imputations, mean, to.matrix = TRUE), 3))
###  Complete the missing data frame, take results fo the mth imputation chain
data[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")] <- complete(imputations, m=1)[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")]
summary(data[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")])
data <- gs_read(LUBDES_gsheet, ws = "1. Coding Table version 2") # consume data from sheet 1, # NOTE: data loaded way is of classes 'tbl_df' and 'data.frame', rather than only 'data.frame' which is needed for imputation.
data<-as.data.frame(data)
data$X..of.samples.for.BD.measure <- as.integer(data$X..of.samples.for.BD.measure)
data$study.case <- factor(paste(data$Study.ID,data$Case.ID,sep="_"))
#dissmiss studies with missing mean for BD or yield
data <- data[-(which(is.na(data$richness.mean))),]
data <- data[-(which(is.na(data$yield.mean))),]
library(mice)
detach("package:mi", unload=TRUE)
imp <- mice(data[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")])
data[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")] <- complete(imp)
### calculate SE for richness and yield mean
data$richness.SE <- data$richness.SD/sqrt(data$X..of.samples.for.BD.measure)
data$yield.SE <- data$yield.SD/sqrt(data$X..of.samples.for.YD.measure)
### check results, e.g. SD must be positive or SE will be NaN
summary(data[,c("richness.mean", "richness.SD", "X..of.samples.for.BD.measure", "yield.mean", "yield.SD", "X..of.samples.for.YD.measure")])
save(data, file="Input/data.Rdata")
setwd("C:\\Users\\hoppek\\Documents\\GitHub\\LUBDES_MA") #KG
save(data, file="Input/data.Rdata")
ES.frame <- data.frame(matrix(ncol=36,nrow=0))
names(ES.frame) <- c("Study.ID","Case.ID","Low.LUI","High.LUI","Habitat.Type",
"Product","ES.From.BD","Fertilization","Irrigation","Pesticides",
"Grazing","Mowing","Clear.Cut","Selective.Logging","Partial.Logging",
"Additional.Treatment", "Date.Start","Date.End","Latitude","Longitude",
"Species.Group","Species.Subgroup","Trophic.Level","Richness.Mean.Low" ,
"Richness.SD.Low","Richness.N.Low","Richness.Plot.Size","Richness.Mean.High","Richness.SD.High",
"Richness.N.High","Yield.Mean.Low","Yield.SD.Low","Yield.N.Low","Yield.Mean.High" ,
"Yield.SD.High","Yield.N.High")
table.sort = function(dat.low,dat.high,low,high){
data.frame("Study.ID"=dat.low$Study.ID, "Case.ID" =dat.low$Case.ID,
"Low.LUI" = low, "High.LUI" = high,
"Land.use...land.cover" = dat.low$Land.use...land.cover, "Product" = dat.low$Product, "ES.From.BD" =dat.low$ES.measured.from.BD.,
"Fertilization" = paste(dat.low$Fertilization, dat.high$Fertilization, sep="_"),
"Irrigation" =paste(dat.low$Irrigation, dat.high$Irrigation, sep="_"),
"Pesticides" = paste(dat.low$Pesticides, dat.high$Pesticides, sep="_"),
"Grazing" =paste(dat.low$Grazing, dat.high$Grazing, sep="_"),
"Mowing" = paste(dat.low$Mowing, dat.high$Mowing, sep="_"),
"Clear.Cut" =paste(dat.low$Clear.Cut.y.n., dat.high$Clear.Cut.y.n., sep="_"),
"Selective.Logging" = paste(dat.low$Selective.Logging.y.n., dat.high$Selective.Logging.y.n., sep="_"),
"Partial.Logging" = paste(dat.low$Partial.Logging.y.n., dat.high$Partial.Logging.y.n., sep="_"),
"Additional.Treatment" =dat.high$Additional.Treatment,
"Date.Start" =dat.low$Date.of.study..start, "Date.End" =dat.low$Date.of.study..end,
"Latitude" =dat.low$latitude..N..S., "Longitude" =dat.low$longitude..E..W.,
"Species.Group" =dat.low$species.group, "Species.Subgroup" =dat.low$species.subgroup.if.provided, "Trophic.Level" =dat.low$trophic.level..species.guild,
#"Product" = dat.low$product,
"Richness.Mean.Low" =dat.low$richness.mean, "Richness.SD.Low" =dat.low$richness.SD, "Richness.N.Low" =dat.low$X..of.samples.for.BD.measure,
"Richness.Plot.Size" =dat.low$sampled.area,
"Richness.Mean.High" = dat.high$richness.mean, "Richness.SD.High" =dat.high$richness.SD, "Richness.N.High" =dat.high$X..of.samples.for.BD.measure,
"Yield.Mean.Low" =dat.low$yield.mean, "Yield.SD.Low" =dat.low$yield.SD, "Yield.N.Low" =dat.low$X..of.samples.for.YD.measure,
"Yield.Mean.High" =dat.high$yield.mean, "Yield.SD.High" =dat.high$yield.SD, "Yield.N.High" =dat.high$X..of.samples.for.YD.measure)
}
unique(paste(data$study.case,data$species.group,sep="-"))
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
if(i %in% c("8235-Norvez2013_1-arthropods")){next}
print(i)
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
if(i %in% c("8235-Norvez2013_1-arthropods","8002-Lohmus2013_1-woody plants")){next}
print(i)
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
if(i %in% c("8235-Norvez2013_1-arthropods","8002-Lohmus2013_1-woody plants","9078-Hautier2014_1-non-woody plants")){next}
print(i)
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
if(i %in% c("8235-Norvez2013_1-arthropods","8002-Lohmus2013_1-woody plants","9078-Hautier2014_1-non-woody plants","9078-Hautier2014_2-non-woody plants")){
print("ERROR. Omit from analysis.")
next}
print(i)
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
print(i)
if(i %in% c("8235-Norvez2013_1-arthropods","8002-Lohmus2013_1-woody plants","9078-Hautier2014_1-non-woody plants","9078-Hautier2014_2-non-woody plants","9078-Hautier2014_3-non-woody plants")){
print("ERROR. Omit from analysis.")
next}
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
paste("9078-Hautier2014_",1:12,"-non-woody plants",sep="")
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
print(i)
if(i %in% c("8235-Norvez2013_1-arthropods","8002-Lohmus2013_1-woody plants",paste("9078-Hautier2014_",1:12,"-non-woody plants",sep=""))){
print("ERROR. Omit from analysis.")
next}
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
for(i in unique(paste(data$study.case,data$species.group,sep="-"))){
print(i)
if(i %in% c("8235-Norvez2013_1-arthropods","8002-Lohmus2013_1-woody plants",paste("9078-Hautier2014_",1:12,"-non-woody plants",sep=""),"516-Higgins1999_1-woody plants")){
print("ERROR. Omit from analysis.")
next}
data.temp = subset(data, paste(data$study.case,data$species.group,sep="-") %in% i)
# for between broad LUI comparisons
temp.low = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI","pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "low")
temp.medium = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "medium")
temp.high = subset(data.temp, Within.study.Intensity %in% c("single measure within one LUI","pooled within one LUI", "pooled measures within one LUI","baseline LUI", "increased LUI") & Intensity.broad   %in% "high")
# for within broad LUI comparisons
temp.low.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "low")
temp.low.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "low")
temp.medium.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "medium")
temp.medium.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "medium")
temp.high.base = subset(data.temp, Within.study.Intensity %in% "baseline LUI" & Intensity.broad   %in% "high")
temp.high.increase = subset(data.temp, Within.study.Intensity %in% "increased LUI" & Intensity.broad   %in% "high")
# table.sort broken? MB - KG: no but Norvez2013, Mastrangelo2012 cause trouble, TO DO: Include error-catch, such as try()
if((nrow(temp.low) + nrow (temp.medium)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.medium,"low","medium"))}
if((nrow(temp.low) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low,temp.high,"low","high"))}
if((nrow(temp.medium) + nrow (temp.high)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium,temp.high,"medium","high"))}
if((nrow(temp.low.base) + nrow (temp.low.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.low.base,temp.low.increase,"low","low"))}
if((nrow(temp.medium.base) + nrow (temp.medium.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.medium.base,temp.medium.increase,"medium","medium"))}
if((nrow(temp.high.base) + nrow (temp.high.increase)) == 2){
ES.frame = rbind(ES.frame,table.sort(temp.high.base,temp.high.increase,"high","high"))}
}
ES.frame$LUI.range <- paste(ES.frame$Low.LUI,ES.frame$High.LUI,sep="-")
ES.frame$LUI.range[ES.frame$LUI.range %in% c("low-low","medium-medium","high-high")] <- 0
ES.frame$LUI.range[ES.frame$LUI.range %in% c("low-medium","medium-high")] <- 1
ES.frame$LUI.range[ES.frame$LUI.range %in% c("low-high")] <- 2
ES.frame$Study.Case <- factor(paste(ES.frame$Study.ID,ES.frame$Case.ID,sep="_"))
#############################
### calculate RR effect sizes
#Effect size calculation
ES.frame[,c("Richness.Log.RR","Richness.Log.RR.Var")] =
escalc("ROM",data= ES.frame, append =F,
m2i = Richness.Mean.Low, m1i = Richness.Mean.High,
sd2i = Richness.SD.Low, sd1i = Richness.SD.High,
n2i = Richness.N.Low, n1i = Richness.N.High)
library(metafor)
ES.frame[,c("Richness.Log.RR","Richness.Log.RR.Var")] =
escalc("ROM",data= ES.frame, append =F,
m2i = Richness.Mean.Low, m1i = Richness.Mean.High,
sd2i = Richness.SD.Low, sd1i = Richness.SD.High,
n2i = Richness.N.Low, n1i = Richness.N.High)
ES.frame[,c("Yield.Log.RR","Yield.Log.RR.Var")] =
escalc("ROM",data= ES.frame, append =F,
m2i = Yield.Mean.Low, m1i = Yield.Mean.High,
sd2i = Yield.SD.Low, sd1i = Yield.SD.High,
n2i = Yield.N.Low, n1i = Yield.N.High)
ES.frame[,c("Richness.SMD","Richness.SMD.Var")] =
escalc("SMDH",data= ES.frame, append =F,
m2i = Richness.Mean.Low, m1i = Richness.Mean.High,
sd2i = Richness.SD.Low, sd1i = Richness.SD.High,
n2i = Richness.N.Low, n1i = Richness.N.High)
ES.frame[,c("Yield.SMD","Yield.SMD.Var")] =
escalc("SMDH",data= ES.frame, append = F,
m2i = Yield.Mean.Low, m1i = Yield.Mean.High,
sd2i = Yield.SD.Low, sd1i = Yield.SD.High,
n2i = Yield.N.Low, n1i = Yield.N.High)
write.csv(ES.frame, "Input/ES_table.csv")
library(ggplot2)
LMM.MA.fit <- function(yi,vi,mods,slab,inner2,outer2){
##############################################################################################################
### fit meta-analytic multivariate/multilevel fixed- and random/mixed-effects models with or without moderators via linear (mixed-effects) models using rma.mv
## Viechtbauer 2015 p 189: the random argument can also contain one (and only one!) formula of the form ~ inner | outer . Effects or outcomes with different values/levels of the outer grouping variable/factor are assumed to be independent, while effects or outcomes with the same value/level of the outer grouping variable/factor share correlated random effects corresponding to the levels of the inner grouping variable/factor. The struct argument is used to specify the variance structure corresponding to the inner variable/factor. With struct="CS", a compound symmetric structure is assumed (i.e., a single variance component tau? corresponding to all values/levels of the inner variable/factor and a single correlation coefficient rho for the correlation between different values/levels).
# btw, there seems to be a problem with the terms inner and outer as they are also R base functions
# TO DO: calculate variance-covariance matrix, esp covariance for between LUI comparisons
#  VCov_matrix <-
rma.mv.fit <- rma.mv(yi=yi, V=vi, mods = mods, random = ~inner2|outer2, struct="CS", data=ES.frame, slab=slab,method="REML", tdist=FALSE, level=95, digits=4, Rscale="cor", sparse=FALSE, verbose=FALSE)
return(rma.mv.fit)
}
mods <- 1
attach(ES.frame)
Richness.MA.fit <- LMM.MA.fit(yi=ES.frame$Richness.Log.RR,vi=ES.frame$Richness.Log.RR.Var,mods=~1,slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"),inner2=ES.frame$Study.Case,outer2=ES.frame$Study.ID)
yi=ES.frame$Richness.Log.RR,vi=ES.frame$Richness.Log.RR.Var,mods=~1,slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"),inner2=ES.frame$Study.Case,outer2=ES.frame$Study.ID
yi=ES.frame$Richness.Log.RR
vi=ES.frame$Richness.Log.RR.Var
mods=~1
slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_")
inner2=ES.frame$Study.Case
outer2=ES.frame$Study.ID
rma.mv.fit <- rma.mv(yi=yi, V=vi, mods = mods, random = ~inner2|outer2, struct="CS", data=ES.frame, slab=slab,method="REML", tdist=FALSE, level=95, digits=4, Rscale="cor", sparse=FALSE, verbose=FALSE)
Richness.MA.fit <- LMM.MA.fit(yi=ES.frame$Richness.Log.RR,vi=ES.frame$Richness.Log.RR.Var,mods=~1,slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"),inner2=Study.Case,outer2=Study.ID)
ES.frame <- ES.frame[-which(ES.frame$Study.ID=="4788-Mosquera-Losada2009"),] # Why?
Richness.MA.fit <- LMM.MA.fit(yi=ES.frame$Richness.Log.RR,vi=ES.frame$Richness.Log.RR.Var,mods=~1,slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"),inner2=Study.Case,outer2=Study.ID)
detach(ES.frame)
attach(ES.frame)
Richness.MA.fit <- LMM.MA.fit(yi=ES.frame$Richness.Log.RR,vi=ES.frame$Richness.Log.RR.Var,mods=~1,slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"),inner2=Study.Case,outer2=Study.ID)
Richness.MA.fit <- LMM.MA.fit(yi=ES.frame$Richness.Log.RR, vi=ES.frame$Richness.Log.RR.Var, mods=~1, slab=paste(ES.frame$Study.Case, ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"), inner2=ES.frame$Study.Case, outer2=ES.frame$Study.ID)
?rma.mv.fit
?rma.mv
rma.mv.fit <- rma.mv(yi=yi, V=vi, mods = mods, random = ~inner2|outer2, struct="CS", data=ES.frame, slab=slab,method="REML", tdist=FALSE, level=95, digits=4, Rscale="cor", sparse=FALSE, verbose=FALSE)
yi=ES.frame$Richness.Log.RR,vi=ES.frame$Richness.Log.RR.Var,mods=~1,slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_"),inner2=ES.frame$Study.Case,outer2=ES.frame$Study.ID
yi=ES.frame$Richness.Log.RR
vi=ES.frame$Richness.Log.RR.Var
mods=~1
slab=paste(ES.frame$Study.Case,ES.frame$Low.LUI,ES.frame$High.LUI,sep="_")
inner2=ES.frame$Study.Case
outer2=ES.frame$Study.ID
rma.mv.fit <- rma.mv(yi=yi, V=vi, mods = mods, random = ~inner2|outer2, struct="CS", data=ES.frame, slab=slab,method="REML", tdist=FALSE, level=95, digits=4, Rscale="cor", sparse=FALSE, verbose=FALSE)
Yield.MA.fit <- LMM.MA.fit(yi=Yield.Log.RR,vi=Yield.Log.RR.Var,mods=~1,slab=paste(Study.Case,Low.LUI,High.LUI,sep="_"),inner=Study.Case,outer=Study.ID)
names(ES.frame)
summary(ES.frame[,24:46])
Richness.MA.fit <- LMM.MA.fit(yi=Richness.Log.RR, vi=Richness.Log.RR.Var, mods=~1, slab=paste(Study.Case, Low.LUI,High.LUI,sep="_"), inner2=1, outer2=Study.ID)
detach(ES.frame)
Richness.MA.fit <- LMM.MA.fit(yi=Richness.Log.RR, vi=Richness.Log.RR.Var, mods=~1, slab=paste(Study.Case, Low.LUI,High.LUI,sep="_"), inner2=1, outer2=Study.ID)
attach(ES.frame)
Richness.MA.fit <- LMM.MA.fit(yi=Richness.Log.RR, vi=Richness.Log.RR.Var, mods=~1, slab=paste(Study.Case, Low.LUI,High.LUI,sep="_"), inner2=1, outer2=Study.ID)
